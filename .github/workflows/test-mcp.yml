name: MCP Server Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test-mcp:
    name: Test MCP Server (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    container:
      image: python:${{ matrix.python-version }}-slim
      options: --privileged
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y bubblewrap git curl
          bwrap --version

      - name: Install mcp-probe
        run: |
          # Detect architecture
          ARCH=$(uname -m)
          case $ARCH in
            x86_64)
              ASSET="mcp-probe-x86_64-unknown-linux-gnu.tar.gz"
              ;;
            aarch64)
              ASSET="mcp-probe-aarch64-unknown-linux-gnu.tar.gz"
              ;;
            *)
              echo "Unsupported architecture: $ARCH"
              exit 1
              ;;
          esac

          # Download latest release
          LATEST_URL=$(curl -s https://api.github.com/repos/conikeec/mcp-probe/releases/latest | grep "browser_download_url.*$ASSET" | cut -d '"' -f 4)
          curl -L -o mcp-probe.tar.gz "$LATEST_URL"
          tar -xzf mcp-probe.tar.gz
          chmod +x mcp-probe
          mv mcp-probe /usr/local/bin/
          mcp-probe --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,mcp,remote]"

      - name: Verify shannot-mcp is installed
        run: |
          which shannot-mcp
          shannot-mcp --help

      - name: Run MCP integration tests (pytest)
        run: |
          pytest tests/test_mcp_integration.py -v --tb=short

      - name: Run MCP server tests (Python script)
        run: |
          python scripts/test_mcp_server.py \
            --report-dir ./mcp-reports \
            --timeout 120 \
            --no-color

      - name: Upload MCP test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mcp-test-reports-py${{ matrix.python-version }}
          path: ./mcp-reports/
          if-no-files-found: warn

      - name: Comment test results on PR
        if: matrix.python-version == '3.11' && github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './mcp-reports/test-summary.md';

            if (!fs.existsSync(path)) {
              console.log('No test summary found, skipping comment');
              return;
            }

            const summary = fs.readFileSync(path, 'utf8');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## MCP Server Test Results\n\n${summary}`
            });

  test-mcp-with-config:
    name: Test MCP Server with Config
    runs-on: ubuntu-latest
    container:
      image: python:3.11-slim
      options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y bubblewrap git curl
          bwrap --version

      - name: Install mcp-probe
        run: |
          # Detect architecture
          ARCH=$(uname -m)
          case $ARCH in
            x86_64)
              ASSET="mcp-probe-x86_64-unknown-linux-gnu.tar.gz"
              ;;
            aarch64)
              ASSET="mcp-probe-aarch64-unknown-linux-gnu.tar.gz"
              ;;
            *)
              echo "Unsupported architecture: $ARCH"
              exit 1
              ;;
          esac

          # Download latest release
          LATEST_URL=$(curl -s https://api.github.com/repos/conikeec/mcp-probe/releases/latest | grep "browser_download_url.*$ASSET" | cut -d '"' -f 4)
          curl -L -o mcp-probe.tar.gz "$LATEST_URL"
          tar -xzf mcp-probe.tar.gz
          chmod +x mcp-probe
          mv mcp-probe /usr/local/bin/
          mcp-probe --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,mcp,remote]"

      - name: Create test config file
        run: |
          mkdir -p ~/.config/shannot
          cat > ~/.config/shannot/config.toml << 'EOF'
          default_executor = "local"

          [executor.local]
          type = "local"
          EOF

      - name: Test with local executor target
        run: |
          # Test that server starts with --target local
          timeout 30 shannot-mcp --target local &
          SERVER_PID=$!
          sleep 5
          kill $SERVER_PID || true
          echo "Server started successfully with --target local"

      - name: Run comprehensive MCP tests
        run: |
          python scripts/test_mcp_server.py \
            --report-dir ./mcp-reports-config \
            --timeout 120 \
            --no-color

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mcp-test-reports-with-config
          path: ./mcp-reports-config/
          if-no-files-found: warn
