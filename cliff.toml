# git-cliff configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""
# template for the changelog body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | split(pat="\n") | first | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = false
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers with links
  { pattern = '\((\w+[-/]\w+)?#([0-9]+)\)', replace = "([#${2}](https://github.com/corv89/shannot/issues/${2}))" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^[Ff]eat", group = "Features" },
  { message = "^[Aa]dd", group = "Features" },
  { message = "^[Ff]ix", group = "Bug Fixes" },
  { message = "^[Dd]oc", group = "Documentation" },
  { message = "^[Ii]mprove.*doc", group = "Documentation" },
  { message = "^[Ee]nhance.*doc", group = "Documentation" },
  { message = "^[Pp]erf", group = "Performance" },
  { message = "^[Rr]efactor", group = "Refactoring" },
  { message = "^[Ss]tyle", group = "Styling" },
  { message = "^[Tt]est", group = "Testing" },
  { message = "^[Cc]hore\\(release\\)", skip = true },
  { message = "^[Cc]hore", group = "Miscellaneous Tasks" },
  { message = "^[Bb]ump", group = "Dependencies" },
  { message = "^[Dd]ependenc", group = "Dependencies" },
  { message = "^[Ii]mprove", group = "Improvements" },
  { message = "^[Cc]hange", group = "Changes" },
  { message = "^[Uu]pdate", group = "Improvements" },
  { message = "^[Mm]erge", skip = true },
  { body = ".*security", group = "Security" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.0.1-beta"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
